{
  "service": {
    "service": "api-proy",
    "serviceObject": {
      "name": "api-proy"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.9",
      "memorySize": 256,
      "iam": {
        "role": "arn:aws:iam::223794358031:role/LabRole"
      },
      "environment": {
        "TABLE_NAME": "dev-meds-table",
        "BUCKET_IMG": "dev-meds-imagen",
        "FARMACIA_TABLE": "dev-farmacia-table"
      },
      "region": "us-east-1",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ScanUnderscoremedsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-proy-dev-scan_meds"
            }
          },
          "NewUnderscoremedsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-proy-dev-new_meds"
            }
          },
          "NewUnderscorefarmaciaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-proy-dev-new_farmacia"
            }
          },
          "CreatefarmaciaTLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-proy-dev-createfarmaciaT"
            }
          },
          "ScanUnderscoremedsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-proy/dev/1701042790526-2023-11-26T23:53:10.526Z/api-proy.zip"
              },
              "Handler": "scan_meds.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "api-proy-dev-scan_meds",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "dev-meds-table",
                  "BUCKET_IMG": "dev-meds-imagen",
                  "FARMACIA_TABLE": "dev-farmacia-table"
                }
              },
              "Role": "arn:aws:iam::223794358031:role/LabRole"
            },
            "DependsOn": [
              "ScanUnderscoremedsLogGroup"
            ]
          },
          "NewUnderscoremedsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-proy/dev/1701042790526-2023-11-26T23:53:10.526Z/api-proy.zip"
              },
              "Handler": "new_meds.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "api-proy-dev-new_meds",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "dev-meds-table",
                  "BUCKET_IMG": "dev-meds-imagen",
                  "FARMACIA_TABLE": "dev-farmacia-table"
                }
              },
              "Role": "arn:aws:iam::223794358031:role/LabRole"
            },
            "DependsOn": [
              "NewUnderscoremedsLogGroup"
            ]
          },
          "NewUnderscorefarmaciaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-proy/dev/1701042790526-2023-11-26T23:53:10.526Z/api-proy.zip"
              },
              "Handler": "new_farmacia.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "api-proy-dev-new_farmacia",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "dev-meds-table",
                  "BUCKET_IMG": "dev-meds-imagen",
                  "FARMACIA_TABLE": "dev-farmacia-table"
                }
              },
              "Role": "arn:aws:iam::223794358031:role/LabRole"
            },
            "DependsOn": [
              "NewUnderscorefarmaciaLogGroup"
            ]
          },
          "CreatefarmaciaTLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-proy/dev/1701042790526-2023-11-26T23:53:10.526Z/api-proy.zip"
              },
              "Handler": "create_farmacia.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "api-proy-dev-createfarmaciaT",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "dev-meds-table",
                  "BUCKET_IMG": "dev-meds-imagen",
                  "FARMACIA_TABLE": "dev-farmacia-table"
                }
              },
              "Role": "arn:aws:iam::223794358031:role/LabRole"
            },
            "DependsOn": [
              "CreatefarmaciaTLogGroup"
            ]
          },
          "ScanUnderscoremedsLambdaVersionG06FN6KFpD9Re08P4JVKMVn5Q9kGuJSrPD85hREudr4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScanUnderscoremedsLambdaFunction"
              },
              "CodeSha256": "NNettooXKGs0cqVYUZyEqFNAOsq7jKEMsc9WC7YJKsU="
            }
          },
          "NewUnderscoremedsLambdaVersioniK9Rr5WxeqqY0uBK02KDvHmo96eMJm6BWaygqwOFc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NewUnderscoremedsLambdaFunction"
              },
              "CodeSha256": "NNettooXKGs0cqVYUZyEqFNAOsq7jKEMsc9WC7YJKsU="
            }
          },
          "NewUnderscorefarmaciaLambdaVersion7N7KT4eoPKrPVrv3InlWEyHlZTsvRBKvpQURNV2Hlyo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NewUnderscorefarmaciaLambdaFunction"
              },
              "CodeSha256": "NNettooXKGs0cqVYUZyEqFNAOsq7jKEMsc9WC7YJKsU="
            }
          },
          "CreatefarmaciaTLambdaVersioncEwUKeFZK5JLwhGT3i4iKaMZuHvJXc2BOio7WyJVMhk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatefarmaciaTLambdaFunction"
              },
              "CodeSha256": "NNettooXKGs0cqVYUZyEqFNAOsq7jKEMsc9WC7YJKsU="
            }
          },
          "S3BucketDevmedsimagen": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "dev-meds-imagen",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "ScanUnderscoremedsLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "ScanUnderscoremedsLambdaPermissionDevmedsimagenS3"
            ]
          },
          "ScanUnderscoremedsLambdaPermissionDevmedsimagenS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScanUnderscoremedsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::dev-meds-imagen"
                  ]
                ]
              },
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-api-proy",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceFarmacia": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "farmacia",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmaciaCrear": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarmacia"
              },
              "PathPart": "crear",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFarmaciaCrearOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFarmaciaCrear"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFarmaciaCrearPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFarmaciaCrear"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NewUnderscorefarmaciaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "NewUnderscorefarmaciaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1701042787970": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFarmaciaCrearOptions",
              "ApiGatewayMethodFarmaciaCrearPost"
            ]
          },
          "NewUnderscorefarmaciaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NewUnderscorefarmaciaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NewUnderscoremedsSnsSubscriptionNuevoMedicamento": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": "arn:aws:sns:us-east-1:223794358031:NuevoMedicamento",
              "Protocol": "lambda",
              "Endpoint": {
                "Fn::GetAtt": [
                  "NewUnderscoremedsLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "NewUnderscoremedsLambdaPermissionNuevoMedicamentoSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NewUnderscoremedsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": "arn:aws:sns:us-east-1:223794358031:NuevoMedicamento"
            }
          },
          "TablaMedicinas": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-meds-table",
              "AttributeDefinitions": [
                {
                  "AttributeName": "fabricant_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "info",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "fabricant_id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "info",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TablaFarmacias": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-farmacia-table",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenant_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "farmacia_name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenant_id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "farmacia_name",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CreatefarmaciaTEventSourceMappingSQSSQSFarmaciaEventQueueQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
              "BatchSize": 2,
              "MaximumBatchingWindowInSeconds": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SQSFarmaciaEventQueueQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatefarmaciaTLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": "True"
            }
          },
          "SQSFarmaciaEventQueueDeadLetterQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "api-proy-dev-CreatefarmaciaTSQSFarmaciaEventQueueDeadLetterQueue",
              "KmsDataKeyReusePeriodSeconds": 600,
              "MessageRetentionPeriod": 1209600
            }
          },
          "SQSFarmaciaEventQueueQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "api-proy-dev-CreatefarmaciaTSQSFarmaciaEventQueueQueue",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "SQSFarmaciaEventQueueDeadLetterQueue",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 2
              },
              "KmsDataKeyReusePeriodSeconds": 600,
              "VisibilityTimeout": 120
            }
          },
          "SQSFarmaciaEventQueueQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "api-proy-dev-CreatefarmaciaTSQSFarmaciaEventQueueQueue",
                "Statement": [
                  {
                    "Sid": "api-proy-dev-CreatefarmaciaTSQSFarmaciaEventQueueSid",
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SQSFarmaciaEventQueueQueue",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": [
                          "arn:aws:sns:us-east-1:223794358031:NuevaFarmacia"
                        ]
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "SQSFarmaciaEventQueueQueue"
                }
              ]
            }
          },
          "SubscribeSQSFarmaciaEventQueueTopic": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Endpoint": {
                "Fn::GetAtt": [
                  "SQSFarmaciaEventQueueQueue",
                  "Arn"
                ]
              },
              "Protocol": "sqs",
              "TopicArn": "arn:aws:sns:us-east-1:223794358031:NuevaFarmacia",
              "RawMessageDelivery": true
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-api-proy-dev-ServerlessDeploymentBucketName"
            }
          },
          "ScanUnderscoremedsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScanUnderscoremedsLambdaVersionG06FN6KFpD9Re08P4JVKMVn5Q9kGuJSrPD85hREudr4"
            },
            "Export": {
              "Name": "sls-api-proy-dev-ScanUnderscoremedsLambdaFunctionQualifiedArn"
            }
          },
          "NewUnderscoremedsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NewUnderscoremedsLambdaVersioniK9Rr5WxeqqY0uBK02KDvHmo96eMJm6BWaygqwOFc"
            },
            "Export": {
              "Name": "sls-api-proy-dev-NewUnderscoremedsLambdaFunctionQualifiedArn"
            }
          },
          "NewUnderscorefarmaciaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NewUnderscorefarmaciaLambdaVersion7N7KT4eoPKrPVrv3InlWEyHlZTsvRBKvpQURNV2Hlyo"
            },
            "Export": {
              "Name": "sls-api-proy-dev-NewUnderscorefarmaciaLambdaFunctionQualifiedArn"
            }
          },
          "CreatefarmaciaTLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatefarmaciaTLambdaVersioncEwUKeFZK5JLwhGT3i4iKaMZuHvJXc2BOio7WyJVMhk"
            },
            "Export": {
              "Name": "sls-api-proy-dev-CreatefarmaciaTLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-api-proy-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "zip": true
      }
    },
    "plugins": [
      "serverless-python-requirements",
      "@agiledigital/serverless-sns-sqs-lambda"
    ],
    "pluginsData": {},
    "functions": {
      "scan_meds": {
        "handler": "scan_meds.lambda_handler",
        "events": [
          {
            "s3": {
              "bucket": "dev-meds-imagen",
              "event": "s3:ObjectCreated:*"
            }
          }
        ],
        "name": "api-proy-dev-scan_meds",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScanUnderscoremedsLambdaVersionG06FN6KFpD9Re08P4JVKMVn5Q9kGuJSrPD85hREudr4"
      },
      "new_meds": {
        "handler": "new_meds.lambda_handler",
        "events": [
          {
            "sns": "arn:aws:sns:us-east-1:223794358031:NuevoMedicamento"
          }
        ],
        "name": "api-proy-dev-new_meds",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "NewUnderscoremedsLambdaVersioniK9Rr5WxeqqY0uBK02KDvHmo96eMJm6BWaygqwOFc"
      },
      "new_farmacia": {
        "handler": "new_farmacia.lambda_handler",
        "events": [
          {
            "http": {
              "path": "farmacia/crear",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS",
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                  }
                }
              }
            }
          }
        ],
        "name": "api-proy-dev-new_farmacia",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "NewUnderscorefarmaciaLambdaVersion7N7KT4eoPKrPVrv3InlWEyHlZTsvRBKvpQURNV2Hlyo"
      },
      "createfarmaciaT": {
        "handler": "create_farmacia.lambda_handler",
        "events": [
          {
            "snsSqs": {
              "name": "SQSFarmaciaEventQueue",
              "topicArn": "arn:aws:sns:us-east-1:223794358031:NuevaFarmacia",
              "batchSize": 2,
              "maximumBatchingWindowInSeconds": 10,
              "maxRetryCount": 2,
              "kmsDataKeyReusePeriodSeconds": 600,
              "deadLetterMessageRetentionPeriodSeconds": 1209600,
              "visibilityTimeout": 120,
              "rawMessageDelivery": true
            }
          }
        ],
        "name": "api-proy-dev-createfarmaciaT",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "CreatefarmaciaTLambdaVersioncEwUKeFZK5JLwhGT3i4iKaMZuHvJXc2BOio7WyJVMhk"
      }
    },
    "resources": {
      "Resources": {
        "TablaMedicinas": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-meds-table",
            "AttributeDefinitions": [
              {
                "AttributeName": "fabricant_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "info",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "fabricant_id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "info",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "TablaFarmacias": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-farmacia-table",
            "AttributeDefinitions": [
              {
                "AttributeName": "tenant_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "farmacia_name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "tenant_id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "farmacia_name",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "api-proy",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "exclude": [
          "**/*"
        ],
        "include": [
          "*.py",
          "amazon-textract-response-parser"
        ],
        "artifactsS3KeyDirname": "serverless/api-proy/dev/code-artifacts",
        "patterns": [
          "unzip_requirements.py",
          ".requirements.zip"
        ],
        "artifact": "/Users/lenin.chavez/Documents/cloud/final_project/api-medicamentos/.serverless/api-proy.zip",
        "artifactDirectoryName": "serverless/api-proy/dev/1701042790526-2023-11-26T23:53:10.526Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/lenin.chavez/Documents/cloud/final_project/api-medicamentos/.serverless/api-proy.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/api-proy/dev/1701042790526-2023-11-26T23:53:10.526Z",
    "artifact": "api-proy.zip"
  }
}